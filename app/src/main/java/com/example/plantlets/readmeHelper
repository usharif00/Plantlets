Firebase rule guide

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read access to the "products" collection for anyone
    match /products/{productId} {
      allow read: if true;

      // Allow write access to the "products" collection only if the user is authenticated
      allow write: if request.auth != null;

      // Restrict updating and deleting products to the user who created them
      allow update, delete: if request.auth != null
          && request.resource.data.owner == request.auth.uid;

      // Define ownership rules for new product creations
      allow create: if request.auth != null
          && request.resource.data.owner == request.auth.uid
          && request.resource.data.name != null
          && request.resource.data.price != null;
    }
  }
}

// Date comparison

if (store.freeTrialDate.toDate() >= store.freeTrialExpireDate.toDate()) {
    // The free trial has expired or is equal to the expiration date.
    // You can handle this case here.
} else {
    // The free trial is still active.
    // You can handle this case here.
}



slideOutAnimation.setAnimationListener(object : Animation.AnimationListener {
    override fun onAnimationStart(animation: Animation?) {
        // Animation start callback
    }

    override fun onAnimationEnd(animation: Animation?) {
        // Make the layout invisible after the animation ends
        layout.visibility = View.GONE
    }

    override fun onAnimationRepeat(animation: Animation?) {
        // Animation repeat callback
    }
})



// firestore data :


 private fun makeAccount() {
        val db = Firebase.firestore
        val email = " usman@gmail.com"
        val store = Store(email)


//            db.collection("Stores").document(email).collection("Items").document(email).set(store)
        db.collection("Stores").addSnapshotListener { snapshotArray, e ->
            if (e != null) {
                Log.w("ERROR", "Listen failed.", e)
                return@addSnapshotListener
            }

            if (snapshotArray != null) {
                for (snapshot in snapshotArray) {
                    if (snapshot != null && snapshot.exists()) {
                        Log.d("DATA-TAG", "Current data: ${snapshot.data}")
                    } else {
                        Log.d("TAG", "Current data: null")
                    }
                }
            }
        }
    }


     firestoreRef.collection(USER_REFRENCE).document(user.id).set(user)
                .addOnSuccessListener {
                    // The data has been successfully written to Firestore
                    // You can perform any actions you want on success here
                    Log.d("Usman-Tag", "Document successfully written!")
                    // Add your success handling logic here
                }
                .addOnFailureListener { e ->
                    // Handle any errors that occurred during the write operation
                    Log.e("Usman-Tag", "Error writing document: ${e.message}")
                    // Add your error handling logic here
                }



     suspend fun createDocumentIfNotExists() {
         val db = Firebase.firestore
         val docRef = db.collection("your_collection_name").document("your_document_id")

         val dataToSet = mapOf(
             "field1" to "value1",
             "field2" to "value2"
         )

         val documentSnapshot = try {
             docRef.get().await()
         } catch (e: Exception) {
             // Handle any errors that occur when checking for document existence
             Log.e("TAG", "Error checking document existence: ${e.message}")
             return
         }

         if (documentSnapshot.exists()) {
             // Document already exists; do not set it again
             Log.d("TAG", "Document already exists.")
         } else {
             // Document does not exist; perform the set operation
             try {
                 docRef.set(dataToSet).await()
                 // Document was created successfully
                 Log.d("TAG", "Document was created.")
             } catch (e: Exception) {
                 // Handle any errors that occur during the set operation
                 Log.e("TAG", "Error setting document: ${e.message}")
             }
         }
     }


   fun getCategoryByQuery(categoryName:String,categoryType:String) {
             val collectionRef = firestoreRef.collection(CATEGORIES_REFRENCE)

             collectionRef
                 .whereEqualTo("Name",categoryName)
                 .whereEqualTo("Type",categoryType)
                 .orderBy("Id")
                 .limit(1)
                 .get()
                 .addOnSuccessListener { documents ->
                     for (document in documents) {
                         val data = document.data
                     }
                 }
                 .addOnFailureListener { exception ->
                 }
         }


         val category = tempCategories.firstOrNull { it.categoryName == "Plants" }

           if (SystemClock.elapsedRealtime() - mLastClickTime < 1000) {
                     return;
                 }
                 mLastClickTime = SystemClock.elapsedRealtime();


button pading removal
:   android:minHeight="20dp"
              android:insetTop="0dp"
              android:insetBottom="0dp"



alpha 0.5 to aplha 1 view
val topShape = ShapeDrawable(RectShape())
topShape.paint.color = Color.argb(128, 0, 0, 0) // 128 is the alpha value (0.5)

// Create a ShapeDrawable with alpha 1
val bottomShape = ShapeDrawable(RectShape())
bottomShape.paint.color = Color.argb(255, 0, 0, 0) // 255 is the alpha value (1)

// Create a LayerDrawable with the two shapes
val layers = arrayOf<Drawable>(bottomShape, topShape)
val layerDrawable = LayerDrawable(layers)

// Set the LayerDrawable as the background of your view
yourView.background = layerDrawable


